datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String      @id
  dni             String?
  cuit            String?
  name            String
  password        String?
  email           String?
  role            UserRole?
  cellphone       String?
  transportistShipments Shipment[] @relation("TransportistShipments")

  @@map("users")
}

enum UserRole {
  ADMIN
  TRANSPORTIST
  EMPLOYEE
}

// Prisma schema with added sender and receiver information fields

model Shipment {
  id                      String            @id
  tracking_id             String            @unique
  state                   ShipmentState
  state_date              DateTime
  creation_date           DateTime          @default(now())
  
  // Sender information
  sender_name             String?
  sender_dni              String?
  sender_phone            String?
  
  // Receiver information
  receiver_name           String?
  receiver_dni            String?
  receiver_phone          String?
  
  // Existing fields
  courier_id              String?
  transportist_id         String?
  details                 String?
  destination_zip_code    String
  destination_street      String
  destination_street_number String
  destination_floor       String?
  destination_apartment   String?
  destination_city        String
  destination_state       String
  origin_zip_code         String
  origin_street           String
  origin_street_number    String
  origin_floor            String?
  origin_apartment        String?
  origin_city             String
  origin_state            String
  payment                 PaymentStatus
  
  transportist          User?               @relation("TransportistShipments", fields: [transportist_id], references: [id])
  courier               Courier?            @relation(fields: [courier_id], references: [id])
  courierShipments      CourierShipment[]
  shipmentLogs          ShipmentLog[]
  packages              Package[]

  @@map("shipments")
}

enum ShipmentState {
  CREATED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  RETURNED
  CANCELLED
}

enum PaymentStatus {
  PAGO
  NO_PAGO
  PAGA_DESTINO
}

model ShipmentLog {
  id             String      @id
  shipment_id    String
  old_shipment   Json
  new_shipment   Json
  action         LogAction
  date           DateTime    @default(now())
  
  shipment       Shipment    @relation(fields: [shipment_id], references: [id])

  @@map("shipment_log")
}

enum LogAction {
  CREATE
  DELETE
  UPDATE
}

model Courier {
  id                String            @id
  name              String
  shipments         Shipment[]
  courierShipments  CourierShipment[]

  @@map("couriers")
}

model CourierShipment {
  id                  String   @id
  shipment_id         String
  courier_id          String
  courier_package_id  String
  
  shipment            Shipment @relation(fields: [shipment_id], references: [id])
  courier             Courier  @relation(fields: [courier_id], references: [id])

  @@map("courier_shipments")
}

model Package {
  id           String      @id
  weight       Float
  height       Float?
  width        Float?
  length       Float?
  shipment_id  String
  package_type PackageType
  
  shipment     Shipment    @relation(fields: [shipment_id], references: [id])

  @@map("packages")
}

enum PackageType {
  DOCUMENT
  PARCEL
  FRAGILE
  ELECTRONICS
  PERISHABLE
}